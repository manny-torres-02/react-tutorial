{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\panamanny\\\\Documents\\\\Programming Practice\\\\react-app\\\\Module1\\\\base-syntax--assignment-problem\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport UserInput from './UserInput/UserInput.js';\nimport UserOutput from './UserOutput/UserOutput.js';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      usernames: [{\n        name: 'manny'\n      }]\n    };\n\n    this.nameChangedHandler = event => {\n      this.setState({\n        username: event.target.value\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, \"Create TWO new components: UserInput and UserOutput\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"UserInput should hold an input element, UserOutput two paragraphs\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \"Output multiple UserOutput components in the App component (any paragraph texts of your choice)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, \"Pass a username (of your choice) to UserOutput via props and display it there\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"Add state to the App component (=> the username) and pass the username to the UserOutput component\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, \"Add a method to manipulate the state (=> an event-handler method)\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, \"Pass the event-handler method reference to the UserInput component and bind it to the input-change event\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, \"Ensure that the new input entered by the user overwrites the old username passed to UserOutput\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, \"Add two-way-binding to your input (in UserInput) to also display the starting username\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"Add styling of your choice to your components/ elements in the components - both with inline styles and stylesheets\")), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, \"hi\"), React.createElement(UserInput, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"adsffasghgfgd\"), React.createElement(UserOutput, {\n      changed: this.nameChangedHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, \"dfbghj,kl\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\panamanny\\Documents\\Programming Practice\\react-app\\Module1\\base-syntax--assignment-problem\\src\\App.js"],"names":["React","Component","UserInput","UserOutput","App","state","usernames","name","nameChangedHandler","event","setState","username","target","value","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,UAAP,MAAuB,4BAAvB;;AACA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC5BI,KAD4B,GACpB;AACNC,MAAAA,SAAS,EAAG,CACX;AAAEC,QAAAA,IAAI,EAAE;AAAR,OADW;AADN,KADoB;;AAAA,SAO1BC,kBAP0B,GAOLC,KAAD,IAAW;AAC7B,WAAKC,QAAL,CAAe;AACbC,QAAAA,QAAQ,EAACF,KAAK,CAACG,MAAN,CAAaC;AADT,OAAf;AAGD,KAXyB;AAAA;;AAa1BC,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6DADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2EAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yGAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uFAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4GALF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2EANF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kHAPF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wGARF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gGATF,EAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6HAVF,CADF,EAaC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAbD,EAcC,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAdD,EAeC,oBAAC,UAAD;AACA,MAAA,OAAO,EAAI,KAAKN,kBADhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAfD,CADF;AAoBD;;AAlCyB;;AAqC5B,eAAeJ,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport UserInput from './UserInput/UserInput.js';\nimport UserOutput from './UserOutput/UserOutput.js';\nclass App extends Component {\nstate = {\n  usernames : [\n   { name: 'manny'}\n  ]\n}\n\n  nameChangedHandler= (event) => {\n    this.setState ({\n      username:event.target.value\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ol>\n          <li>Create TWO new components: UserInput and UserOutput</li>\n          <li>UserInput should hold an input element, UserOutput two paragraphs</li>\n          <li>Output multiple UserOutput components in the App component (any paragraph texts of your choice)</li>\n          <li>Pass a username (of your choice) to UserOutput via props and display it there</li>\n          <li>Add state to the App component (=> the username) and pass the username to the UserOutput component</li>\n          <li>Add a method to manipulate the state (=> an event-handler method)</li>\n          <li>Pass the event-handler method reference to the UserInput component and bind it to the input-change event</li>\n          <li>Ensure that the new input entered by the user overwrites the old username passed to UserOutput</li>\n          <li>Add two-way-binding to your input (in UserInput) to also display the starting username</li>\n          <li>Add styling of your choice to your components/ elements in the components - both with inline styles and stylesheets</li>\n        </ol>\n       <h1>hi</h1>\n       <UserInput>adsffasghgfgd</UserInput>\n       <UserOutput\n       changed = {this.nameChangedHandler}>dfbghj,kl</UserOutput>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}